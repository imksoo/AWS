---
AWSTemplateFormatVersion: 2010-09-09
Description: Create VPC Subnets
Parameters:
  VPCCidr:
    Type: String
    Description: VPC CIDR
    AllowedPattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,3}"
    Default: 10.0.0.0/16
  VPCCidrA:
    Type: String
    Description: Subnet CIDR of AZ-A
    AllowedPattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,3}"
    Default: 10.0.1.0/24
  VPCCidrB:
    Type: String
    Description: Subnet CIDR of AZ-B
    AllowedPattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,3}"
    Default: 10.0.2.0/24
  VPCCidrC:
    Type: String
    Description: Subnet CIDR of AZ-C
    AllowedPattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,3}"
    Default: 10.0.3.0/24
  VPCName:
    Type: String
    Description: VPC Name
    MinLength: 3
    MaxLength: 63
    AllowedPattern: "[a-zA-Z0-9][a-zA-Z0-9-]+"
  AssignPublicIp:
    Type: String
    Description:
      Indicates whether instances that are launched in
      this subnet receive a public IP address.
      By default, the value is false.
    AllowedValues:
      - true
      - false
    Default: false
  CreateInternetGateway:
    Type: String
    Description:
      Create internet gateway and assign to route table.
      If you use NAT gateway, set this parameter to true.
    AllowedValues:
      - true
      - false
    Default: false
  CreateNATGateway:
    Type: String
    Description: Create NAT gateway and assign to route table.
    AllowedValues:
      - true
      - false
    Default: false
  CreateVPNGateway:
    Type: String
    Description: Create VPN gateway and assign to route table.
    AllowedValues:
      - true
      - false
    Default: false
Conditions:
  CondCreateIGW:
    !Equals ["true", !Ref CreateInternetGateway]
  CondCreateIGWRoute:
    !And
    - !Equals ["true", !Ref CreateInternetGateway]
    - !Equals ["false", !Ref CreateNATGateway]
  CondCreateNATGW:
    !Equals ["true", !Ref CreateNATGateway]
  CondCreateNATGWRoute:
    !And
    - !Equals ["true", !Ref CreateInternetGateway]
    - !Equals ["true", !Ref CreateNATGateway]
  CondCreateVPNGW:
    !Equals ["true", !Ref CreateVPNGateway]
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub VPC-${VPCName}
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ACL-${VPCName}
  NetworkAclEntryInbound100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      Egress: false
      RuleNumber: 100
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      Protocol: -1
  NetworkAclEntryOutbound100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      Egress: true
      RuleNumber: 100
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      Protocol: -1
  VPCSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2a
      CidrBlock: !Ref VPCCidrA
      MapPublicIpOnLaunch: !Ref AssignPublicIp
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub Subnet-${VPCName}-A
  VPCSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2b
      CidrBlock: !Ref VPCCidrB
      MapPublicIpOnLaunch: !Ref AssignPublicIp
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub Subnet-${VPCName}-B
  VPCSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2c
      CidrBlock: !Ref VPCCidrC
      MapPublicIpOnLaunch: !Ref AssignPublicIp
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub Subnet-${VPCName}-C
  SubnetNetworkAclAssociationA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref VPCSubnetA
      NetworkAclId: !Ref NetworkAcl
  SubnetNetworkAclAssociationC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref VPCSubnetC
      NetworkAclId: !Ref NetworkAcl
  RouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub RT-${VPCName}-A
  RouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub RT-${VPCName}-B
  RouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub RT-${VPCName}-C
  SubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPCSubnetA
      RouteTableId: !Ref RouteTableA
  SubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPCSubnetB
      RouteTableId: !Ref RouteTableB
  SubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPCSubnetC
      RouteTableId: !Ref RouteTableC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub IGW-${VPCName}
    Condition: CondCreateIGW
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
    Condition: CondCreateIGW
  InternetGatewayRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    Condition: CondCreateIGWRoute
  InternetGatewayRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    Condition: CondCreateIGWRoute
  InternetGatewayRouteC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    Condition: CondCreateIGWRoute
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: us-west-2.compute.internal
      DomainNameServers:
        - AmazonProvidedDNS
      NetbiosNodeType: 2
      Tags:
        - Key: Name
          Value: !Sub DHCPOpts-${VPCName}
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions
  VPCS3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref RouteTableA
        - !Ref RouteTableC
      ServiceName: com.amazonaws.us-west-2.s3
      VpcId: !Ref VPC
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:*"
            Resource: "*"
  NATElasticIPA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Condition: CondCreateNATGW
  NATElasticIPB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Condition: CondCreateNATGW
  NATElasticIPC:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Condition: CondCreateNATGW
  NATGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [NATElasticIPA, AllocationId]
      SubnetId: !Ref VPCSubnetA
    Condition: CondCreateNATGW
  NATGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [NATElasticIPA, AllocationId]
      SubnetId: !Ref VPCSubnetB
    Condition: CondCreateNATGW
  NATGatewayC:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [NATElasticIPC, AllocationId]
      SubnetId: !Ref VPCSubnetC
    Condition: CondCreateNATGW
  NATGatewayRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayA
    Condition: CondCreateNATGWRoute
  NATGatewayRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayB
    Condition: CondCreateNATGWRoute
  NATGatewayRouteC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayC
    Condition: CondCreateNATGWRoute
  VPNGateway:
    Type: AWS::EC2::VPNGateway
    Properties:
      Type: ipsec.1
      Tags:
        - Key: Name
          Value: !Sub VPNGW-${VPCName}
    Condition: CondCreateVPNGW
  VPNGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpnGatewayId: !Ref VPNGateway
      VpcId: !Ref VPC
    Condition: CondCreateVPNGW
  VPNGatewayRoutePropagation:
    Type: AWS::EC2::VPNGatewayRoutePropagation
    Properties:
      RouteTableIds:
        - !Ref RouteTableA
        - !Ref RouteTableB
        - !Ref RouteTableC
      VpnGatewayId: !Ref VPNGateway
    DependsOn: VPNGatewayAttachment
    Condition: CondCreateVPNGW
  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  VPCFlowLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: VPCFlowLogs
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogGroup
              - logs:DescribeLogStream
            Resource: "*"
      Roles:
        - !Ref VPCFlowLogsRole
    DependsOn: VPCFlowLogsRole
  VPCFlowLogs:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt [VPCFlowLogsRole, Arn]
      LogGroupName: !Sub VPCFlowLogs-${VPCName}
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
